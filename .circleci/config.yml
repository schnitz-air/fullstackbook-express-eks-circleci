version: 2.1
executors:
  linux-executor:
    machine:
      image: ubuntu-2004:current # Replace with a suitable image or executor
      resource_class: medium
    environment:
      CORTEX_API_URL: https://api-ms-cxsiamp.xdr.us.paloaltonetworks.com
      CORTEX_CLI_VERSION: 0.13.0
orbs:
  node: circleci/node@4.7

jobs:
  build-and-test:
    docker:
      - image: cimg/node:16.10
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run tests
          command: npm test
  deploy_to_production:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Deploy to EKS
          command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x ./kubectl
              pip3 install awscli --upgrade
              aws --version
              aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 213561109591.dkr.ecr.us-east-1.amazonaws.com
              aws eks update-kubeconfig --name my-cluster
              LATEST_SHA=$(git rev-parse HEAD)
              docker build -t express-eks:$LATEST_SHA .
              docker tag express-eks:$LATEST_SHA 213561109591.dkr.ecr.us-east-1.amazonaws.com/express-eks:$LATEST_SHA
              docker push 213561109591.dkr.ecr.us-east-1.amazonaws.com/express-eks:$LATEST_SHA
              docker tag express-eks:$LATEST_SHA 213561109591.dkr.ecr.us-east-1.amazonaws.com/express-eks:latest
              docker push 213561109591.dkr.ecr.us-east-1.amazonaws.com/express-eks:latest
              ./kubectl set image deployment/myapp myapp=213561109591.dkr.ecr.us-east-1.amazonaws.com/express-eks:$LATEST_SHA -n default              
  cortex-code-scan:
    executor: linux-executor
    steps:
      - checkout
      - run:
          name: Get Temporary Token and Pull Docker Image
          command: |
            export TOKEN_RESPONSE=$(curl --location "${CORTEX_API_URL}/public_api/v1/unified-cli/image/token" \
                                        --header "Authorization: ${CORTEX_API_KEY}" \
                                        --header "x-xdr-auth-id: ${CORTEX_API_KEY_ID}" \
                                        --header "Content-Type: application/json" \
                                        --data "{}" -s)
            export TEMP_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.token')
            docker pull distributions.traps.paloaltonetworks.com/cli-docker/${TEMP_TOKEN}/method:amd64-${CORTEX_CLI_VERSION}
            docker tag distributions.traps.paloaltonetworks.com/cli-docker/${TEMP_TOKEN}/method:amd64-${CORTEX_CLI_VERSION} cortexcli:${CORTEX_CLI_VERSION}
      - run:
          name: Run Cortex CLI Container
          #  Replace owner/repo with your actual repository information
          command: |
            docker run --rm -v /home/circleci/project:/home/code cortexcli:${CORTEX_CLI_VERSION} \
                        --api-base-url ${CORTEX_API_URL} \
                        --api-key ${CORTEX_API_KEY} \
                        --api-key-id ${CORTEX_API_KEY_ID} \
                        code scan \
                        --directory /home/code \
                        --repo-id schnitz-air/fullstackbook-express-eks-circleci \
                        --branch ${CIRCLE_BRANCH} \
                        --source CIRCLE_CI \
                        --create-repo-if-missing

workflows:
  sample:
    jobs:
      - cortex-code-scan:
          context: cortex-secrets
      - build-and-test:
          requires:
            - cortex-code-scan
      - deploy_to_production:
          requires:
            - build-and-test
